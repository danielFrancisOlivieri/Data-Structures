// lineType
// creates and performs operations on lines
// such operations include comparing lines, calculating intersection, finding perpendicularity

#include <iostream>
#include <limits>

using namespace std;

class lineType {

double a, b, c;
public:
lineType() {


}
lineType(int first) {
a = first;

};

lineType (int first, int second) {

a = first;
b = second;
};

lineType (int first, int second, int third) {
a = first;
b = second;
c = third;
}

double getA();

double getB();

double getC();

void setValues (int aValue, int bValue, int cValue);

double findSlope();

bool areEqual(lineType otherLine);

bool areParallel (lineType otherLine);

bool arePerpendicular (lineType otherLine);

};


int main()
{
    double firstA, firstB, firstC, secondA,secondB, secondC;
    cout << "Hello! In this program we understand lines using the common equation ax + by = c." << endl;
    cout << "Let's start with the first line" << endl;
    cout << "The 'a' value of the first line is: ";
     cin >> firstA;
    cout << "The 'b' value of the first line is: ";
     cin >> firstB;
    cout << "The 'c' value of the first line is: ";
     cin >> firstC;
cout << endl;
cout << "Now let's input the values for the second line" << endl;
cout << "The 'a' value of the second line is: " ;
cin >> secondA;
cout << "The 'b' value of the second line is: " ;
cin >> secondB;
cout << "The 'c' value of the second line is: " ;
cin >> secondC;

    lineType lineOne(firstA, firstB, firstC);
    lineType lineTwo (secondA, secondB, secondC);
char choice;
cout << "Please press the letter that corresponds to the action you would like to do next." << endl;
cout << endl;
cout << "a) Find the slope of the first line" << endl;
cout << "b) Find the slope of the second line" << endl;
cout << "c) Determine if the two lines are equal" << endl;
cout << "d) Determine if the two lines are parallel" << endl;
cout << "e) Determine if the two lines are perpendicular" << endl;
cout << "f) Determine where the two lines intersect if they are not parallel" << endl; // function not yet written
cin >> choice;
   // lineType anotherLine(1, 32, 160);
    // mainFrame.setValues(12, -51, 14);
    double results = lineTwo.findSlope();
    cout << results << "  " << choice << endl;
    //cout << mainFrame.arePerpendicular(anotherLine) << endl;
    return 0;
}

double lineType :: getA() {

return a;

};

double lineType :: getB() {

return b;

};

double lineType :: getC() {

return c;

};

void lineType:: setValues (int aValue, int bValue, int cValue) {
a = aValue;
b = bValue;
c = cValue;

}

double lineType :: findSlope() {

if (b == 0) {
    return std::numeric_limits<double>::quiet_NaN(); // should return undefined but doesn't
}
else {

    double result = -a / b;
    return result;

}

};
// in need of attention
bool lineType :: areEqual(lineType otherLine) {

if ( a == otherLine.getA()) {

    if (b == otherLine.getB()) {

        if (c == otherLine.getC()) {
            return true;
        }
    }
}

// must add section to address the other way of finding if two lines are equal

};

bool lineType :: areParallel (lineType otherLine) {

if ( areEqual(otherLine) ) { // makes sure that the lines aren't just the same line
    return false;
}

// compares slopes of the different lines
if ( findSlope() == otherLine.findSlope()) {
    return true;
}

return false;

}

bool lineType :: arePerpendicular (lineType otherLine) {

if ((b == 0) && (otherLine.b == 0)) {
    return true;
}

double firstSlope = findSlope();

double secondSlope = otherLine.findSlope();
cout << firstSlope << "  " << secondSlope <<endl;
double sumOfSlopes = firstSlope * secondSlope;

if (sumOfSlopes == -1) {

    return true;
}
return false;


}



