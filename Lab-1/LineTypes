// lineType
// creates and performs operations on lines
// such operations include comparing lines, calculating intersection, finding perpendicularity

#include <iostream>
#include <limits>

using namespace std;

class lineType {

  double a, b, c;
  public:
    lineType() {

    }
  lineType(int first) {
    a = first;

  };

  lineType(int first, int second) {

    a = first;
    b = second;
  };

  lineType(int first, int second, int third) {
    a = first;
    b = second;
    c = third;
  }

  double getA();

  double getB();

  double getC();

  void setValues(int aValue, int bValue, int cValue);

  double findSlope();

  bool areEqual(lineType otherLine);

  bool areParallel(lineType otherLine);

  bool arePerpendicular(lineType otherLine);

  double pointOfIntersectionX(lineType otherLine);

  double pointOfIntersectionY(lineType otherLine);

};

int main() {
  bool restart = true;
  double firstA, firstB, firstC, secondA, secondB, secondC;
  cout << "Hello! In this program we understand lines using the common equation ax + by = c." << endl;
  cout << "Let's start with the first line" << endl;

  while (restart) {
    cout << "The 'a' value of the first line is: ";
    cin >> firstA;
    cout << "The 'b' value of the first line is: ";
    cin >> firstB;
    cout << "The 'c' value of the first line is: ";
    cin >> firstC;
    cout << endl;
    cout << "Now let's input the values for the second line" << endl;
    cout << "The 'a' value of the second line is: ";
    cin >> secondA;
    cout << "The 'b' value of the second line is: ";
    cin >> secondB;
    cout << "The 'c' value of the second line is: ";
    cin >> secondC;

    lineType lineOne(firstA, firstB, firstC);
    lineType lineTwo(secondA, secondB, secondC);
    char choice;
    bool continueThis = true;
    while (continueThis) {
      double results = lineOne.pointOfIntersectionX(lineTwo);
      double results2 = lineOne.pointOfIntersectionY(lineTwo);

      cout << "Please press the letter that corresponds to the action you would like to do next." << endl;
      cout << endl;
      cout << "a) Find the slope of the first line" << endl;
      cout << "b) Find the slope of the second line" << endl;
      cout << "c) Determine if the two lines are equal" << endl;
      cout << "d) Determine if the two lines are parallel" << endl;
      cout << "e) Determine if the two lines are perpendicular" << endl;
      cout << "f) Determine where the two lines intersect" << endl; // function not yet written
      cout << "g) Restart with new lines" << endl;
      cout << "h) Exit this program" << endl;
      cin >> choice;
      cout << endl;
      switch (choice) {

      case 'a':
        {

          double slope = lineOne.findSlope();
          cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
          cout << "The slope of the first line is: " << slope << endl;
          cout << "**********************************************************" << endl;
        }
        break;
      case 'b':
        {

          double slope = lineTwo.findSlope();
           cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
          cout << "The slope of the second line is: " << slope << endl;
      cout << "**********************************************************" << endl;
          break;
        }
      case 'c':
        {

          if (lineOne.areEqual(lineTwo) == 0) {
                 cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
            cout << "These lines are not equivalent." << endl;
         cout << "**********************************************************" << endl;

          } else {
         cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
            cout << "These lines are equivalent." << endl;
         cout << "**********************************************************" << endl;
          }
        }
        break;

      case 'd':
        if (lineOne.areParallel(lineTwo)) {
                   cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
          cout << "These lines are parallel." << endl;
 cout << "**********************************************************" << endl;
        } else {
               cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
          cout << "These lines are not parallel." << endl;
 cout << "**********************************************************" << endl;
        }
        break;
      case 'e':
        {

          if (lineOne.arePerpendicular(lineTwo)) {
                   cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
            cout << "These lines are perpendicular" << endl;
             cout << "**********************************************************" << endl;
          }
          else {
                 cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
             cout << "These lines are not perpendicular" << endl;
              cout << "**********************************************************" << endl;
          }
        }
        break;
      case 'f':
        {
            if (lineOne.areParallel(lineTwo)) {
                   cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
          cout << "These lines are parallel and therefore do not intersect." << endl;
           cout << "**********************************************************" << endl;
            }
            else {
          double xVal = lineOne.pointOfIntersectionX(lineTwo);

          double yVal = lineOne.pointOfIntersectionY(lineTwo);
   cout << "**********************************************************" << endl;
          cout << "Answer: " << endl;
          cout << "These lines intersect when the x value is " << xVal << " and the y value is " << yVal << endl;
           cout << "**********************************************************" << endl;
            }
        }
        break;

      case 'g':
        continueThis = false;
        break;
      case 'h':
        continueThis = false;
        restart = false;
      }

    }

  }
  return 0;
}

double lineType::getA() {

  return a;

};

double lineType::getB() {

  return b;

};

double lineType::getC() {

  return c;

};

void lineType::setValues(int aValue, int bValue, int cValue) {
  a = aValue;
  b = bValue;
  c = cValue;

}

double lineType::findSlope() {

  if (b == 0) {
    return std::numeric_limits < double > ::quiet_NaN(); // should return undefined but doesn't
  }
  else if (a == 0) {
     return std::numeric_limits < double > ::quiet_NaN(); // should return undefined but doesn't
  }
  else {

    double result = -a / b;
    return result;

  }

};
// in need of attention
bool lineType::areEqual(lineType otherLine) {

double aResult, bResult, cResult;

  if (a == otherLine.getA()) {

    if (b == otherLine.getB()) {

      if (c == otherLine.getC()) {
        return true;
      }
    }
  }

  // uses other method to determine equality
  aResult = a / otherLine.a;
  bResult = b / otherLine.b;
  cResult = c / otherLine.c;

  if ((aResult == bResult) && (bResult == cResult)) {
    return true;
  }

  return false;
};

bool lineType::areParallel(lineType otherLine) {

  if (areEqual(otherLine)) { // makes sure that the lines aren't just the same line
    return false;
  }

  // compares slopes of the different lines
  if (findSlope() == otherLine.findSlope()) {
    return true;
  }

  return false;

}

bool lineType::arePerpendicular(lineType otherLine) {

  if ((a == 0) && (otherLine.a == 0)) {
    return true;
  }

  if ((b == 0) && (otherLine.b == 0)) {
    return true;
  }

  double firstSlope = findSlope();

  double secondSlope = otherLine.findSlope();
  double sumOfSlopes = firstSlope * secondSlope;

  if (sumOfSlopes == -1) {

    return true;
  }
  return false;

}

double lineType::pointOfIntersectionX(lineType otherLine) {
  double allA, allB, result;

  if ((a == 0) && (otherLine.a == 0)) {
    return 0;
  }

  if ((b == 0) && (otherLine.b == 0)) {
    return 0;
  }

  allA = a - otherLine.a; // holds results of subtraction for later use in division

  allB = otherLine.b - b;

  result = allB / allA;

  //return "These two lines intersect when X equals " << result ;
  return result;

}

double lineType::pointOfIntersectionY(lineType otherLine) {

  double yValue, xValue;

  xValue = pointOfIntersectionX(otherLine);

  yValue = (a * xValue) + b;

  return yValue;

}
